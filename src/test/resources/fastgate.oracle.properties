# Uncomment section below when embedded-monitoring enabled (and comment when disabled):
#hibernate.connection.driver_class=net.bull.javamelody.JdbcDriver
#hibernate.connection.driver=oracle.jdbc.OracleDriver

# Comment section below when embedded-monitoring enabled (and uncomment when disabled):
hibernate.connection.driver_class=oracle.jdbc.OracleDriver

#hibernate.dialect=ru.befree.ibs.core.IbsOracle10gDialect
hibernate.dialect=ru.befree.ibs.core.IbsOracle10gDialect
hibernate.connection.url=jdbc:oracle:thin:@test-b2b-oracle-01.g01.i-free.ru:1521/XE
hibernate.connection.username=fastgate
hibernate.connection.password=fastgate1
hibernate.connection.autocommit=true

hibernate.show_sql=false
hibernate.format_sql=false
hibernate.hbm2ddl.auto=validate

hibernate.id.new_generator_mappings=true

# Connection Pool configuration
# http://jolbox.com/configuration.html
# Full config example: bonecp-default-config.xml in bonecp-X.X.X.X.jar
# BoneCP connection provider class
hibernate.connection.provider_class=ru.befree.ibs.persistence.pool.BoneCPConnectionProvider

# Sets the idleConnectionTestPeriod.  This sets the time (in minutes), for a connection
# to remain idle before sending a test query to the DB. This is useful to prevent a DB from timing out connections on its end.
# Do not use aggressive values here!   Default: 240 min, set to 0 to disable
bonecp.idleConnectionTestPeriodInMinutes=10

# Sets Idle max age (in min).  The time (in minutes), for a
# connection to remain unused before it is closed off. Do not use aggressive
# values here!  Default: 60 minutes, set to 0 to disable.
bonecp.idleMaxAgeInMinutes=60

# In order to reduce lock contention and thus improve performance, each incoming connection request picks off a connection
# from a pool that has thread-affinity, i.e. pool[threadId % partition_count].
# The higher this number, the better your performance will be for the case when you have plenty of short-lived threads.
# Beyond a certain threshold, maintenence of these pools will start to have a negative effect on performance
# (and only for the case when connections on a partition start running out).
bonecp.partitionCount=3

# Sets the maximum number of connections that will be contained in every partition.
# Setting this to 5 with 3 partitions means you will have 15 unique
# connections to the database. Note that the connection pool will not create all
# these connections in one go but rather start off with minConnectionsPerPartition and gradually
# increase connections as required.
bonecp.maxConnectionsPerPartition=30

# Sets the minimum number of connections that will be contained in every partition.
bonecp.minConnectionsPerPartition=1

# When the available connections are about to run out, BoneCP will dynamically create new ones in batches.
#This property controls how many new connections to create in one go (up to a maximum of maxConnectionsPerPartition).
# Note: This is a per partition setting.
bonecp.acquireIncrement=10

# Sets the connection test statement.  The query to send to the DB
# to maintain keep-alives and test for dead connections. This is database specific and
# should be set to a query that consumes the minimal amount of load
# on the server
bonecp.connectionTestStatement=SELECT * FROM dual

# Sets statementsCacheSize setting.  The number of statements to cache.
bonecp.statementsCacheSize=0

# Sets number of helper threads to create that will handle releasing a connection.
bonecp.releaseHelperThreads=3

# Queries taking longer than this limit to execute are logged.
bonecp.queryExecuteTimeLimitInMs=100

# Hibernate L2 Caching support
hibernate.cache.region.factory_class=net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory
# Configuration resource (should be in classpath)
hibernate.cache.use_query_cache=false
